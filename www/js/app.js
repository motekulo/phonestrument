/*
* Please see the included README.md file for license terms and conditions.
*/


// This file is a suggested starting place for your code.
// It is completely optional and not required.
// Note the reference that includes it in the index.html file.


/*jslint browser:true, devel:true, white:true, vars:true */
/*global $:false, intel:false app:false, dev:false, cordova:false */


// For improved debugging and maintenance of your app, it is highly
// recommended that you separate your JavaScript from your HTML files.
// Use the addEventListener() method to associate events with DOM elements.

// For example:

// var el ;
// el = document.getElementById("id_myButton") ;
// el.addEventListener("click", myEventHandler, false) ;



// The function below is an example of the best way to "start" your app.
// This example is calling the standard Cordova "hide splashscreen" function.
// You can add other code to it or add additional functions that are triggered
// by the same event or other events.

var phonestrument = new Phonestrument(116, 4, "E", 2);
var currentBar = "";  //Tone.js representation of current bar (eg "1:0:0")
var barNum = 0; // Bar number as integer
var partBar = 0; // At which point in bars the current displayed part is at
var sequencerDivision = 16;
var panOnDrag = true;
var volOnDrag = true;

document.addEventListener('DOMContentLoaded', function () {

    console.log("App ready - app.js");
    phonestrument.schedulePing(function(pos){

        var partState = phonestrument.currentPlayer.part.state;
        var partProgress = phonestrument.currentPlayer.part.progress;
        partBar = Math.round(partProgress * phonestrument.currentPlayer.length);
        console.log(pos + "  and part is " + partState + " and progress " + partProgress);
        console.log("Bar number in current part: " + partBar);
        currentBar = pos;
        barNum = parseInt(currentBar.split(':')[0], 10);
        var barMatrix = phonestrument.currentPlayer.getCurrentBarDataToDisplay(partBar, sequencerDivision);
        console.log("barMatrix: " + barMatrix);
        seqMatrix.matrix = barMatrix;
        //seqMatrix.matrix[4][1] = 1;
        seqMatrix.draw();
        barnumberComment.val.text = pos;
        barnumberComment.draw();
    }, "1m");

    $(document).ready(function() {
        $('#instWaveSelect').change(function() {
            var waveType = ( $(this).find(":selected").val() );
            phonestrument.currentPlayer.instrument.set({
                "oscillator" : {
                    "type" : waveType
                }
            });

        });

        $('#instTypeSelect').change(function() {
            var instType = ( $(this).find(":selected").val() );
            console.log("Changing instrument type to " + instType);
            switch (instType) {
                case "mono":
                phonestrument.currentPlayer.setSoloInstrument();
                break;

                case "poly":
                phonestrument.currentPlayer.setChordInstrument();
                break;

                case "samples":
                phonestrument.currentPlayer.setSamplerInstrument();
                break;
            }

        });

    });



})

// document.addEventListener("deviceready", onAppReady, false) ;
// document.addEventListener("onload", onAppReady, false) ;

// The app.Ready event shown above is generated by the init-dev.js file; it
// unifies a variety of common "ready" events. See the init-dev.js file for
// more details. You can use a different event to start your app, instead of
// this event. A few examples are shown in the sample code above. If you are
// using Cordova plugins you need to either use this app.Ready event or the
// standard Crordova deviceready event. Others will either not work or will
// work poorly.

// NOTE: change "dev.LOG" in "init-dev.js" to "true" to enable some console.log
// messages that can help you debug Cordova app initialization issues.
nx.onload = function(){
    console.log("nexusUI loaded from app.js");
    nx.colorize("#00CCFF"); // sets accent (default)
    nx.colorize("border", "#222222");
    nx.colorize("fill", "#8E8E8E");
    //  playButton.mode = "toggle";
    // addItemButton.mode = "toggle";
    //    rewindButton1.getOffset();

    octaveComment.val.text="4";
    barnumberComment.val.text="0";
    togglePanVol.val.value = 1;
    togglePanVol.draw();

    tempoText.set({
        value: 116
    })


    tempoText.min = 1;
    tempoText.max = 360;
    tempoText.decimalPlaces = 0;
    tempoText.on('*', function(data){
        //console.log(data);
        phonestrument.changeTempo(data.value);
    })

    partLength.set({
        value: 4
    })
    partLength.on('*', function(data){
        phonestrument.currentPlayer.adjustPartLength(data.value);
        console.log("Lengthened by " + data);
    })

    divisionNumber.set({
        value: sequencerDivision
    })
    divisionNumber.min = 4;
    divisionNumber.max = 16;
    divisionNumber.decimalPlaces = 0;
    divisionNumber.on('*', function(data){
        //console.log(data);
        sequencerDivision = data.value;
        seqMatrix.col = sequencerDivision;
        seqMatrix.draw();
    })

    addItemButton.on('*', function(data) {
        console.log(data);
        if (data.press == 0) {  // seems odd but that's how it's working?
        mainStage.addItem();
        phonestrument.createNewPlayer();

    }
})

mainStage.draw();
mainStage.on('*', function(data) {
    //console.log(data.x);
    if (panOnDrag) {
        phonestrument.currentPlayer = phonestrument.player[data.item];
        phonestrument.currentPlayer.panVol.pan.value = data.x;
    }
    if (volOnDrag) {
        phonestrument.currentPlayer = phonestrument.player[data.item];
        phonestrument.currentPlayer.panVol.volume.value = data.y * -24;
    }

    if (data.state == "release"){
        phonestrument.currentPlayer = phonestrument.player[data.item];
        if (data.onstage && phonestrument.currentPlayer.part.state == "stopped") {
            //var nextBar = currentBar + " + 1m";
            //console.log("starting part at " + nextBar);
            phonestrument.currentPlayer.part.start("0:0:0"); // doesn't work as expected; starts immediately

        } else if (!data.onstage && phonestrument.currentPlayer.part.state == "started") {
            //var nextBar = currentBar + " + 1m";
            //console.log("stopping part at " + nextBar);
            phonestrument.currentPlayer.part.stop("0:0:0"); // doesn't work as expected; stops immediately
        }
    }
})

seqMatrix.row = 7;
seqMatrix.col = sequencerDivision;
seqMatrix.init();
seqMatrix.draw();

seqMatrix.on('*', function(data) {
    //console.log(data);
    var partBarForTone = partBar + ":0:0";
    phonestrument.currentPlayer.updatePart(partBarForTone, data, sequencerDivision);
    // if a mono instrument, then toggle others in column to 0
    if (phonestrument.currentPlayer.poly == false) {
        for (i=0; i < seqMatrix.row; i++) {
            if (i != data.row) {
                seqMatrix.matrix[data.col][i] = 0;
            }
        }
        seqMatrix.draw();
    }
    phonestrument.currentPlayer.updatePartView(partBar, seqMatrix.matrix, sequencerDivision);
})

octaveUpButton.on('*', function(data) {
    console.log(data);
    if (data.press == 0) {
        phonestrument.currentPlayer.adaptor.octave++;
        var currentOctave = parseInt(octaveComment.val.text, 10);
        octaveComment.val.text = (currentOctave + 1).toString();
        octaveComment.draw();
    }
})

octaveDownButton.on('*', function(data) {
    console.log(data);
    if (data.press == 0) {
        phonestrument.currentPlayer.adaptor.octave--;
        var currentOctave = parseInt(octaveComment.val.text, 10);
        octaveComment.val.text = (currentOctave - 1).toString();
        octaveComment.draw();
    }
})


var playing = false;
playButton.on('*', function(data) {
    console.log(data);
    if (data.value == 1){
        if (!playing) {
            //console.log("Starting transport");
            phonestrument.startPlaying();
            playing = true;
        }
    }
    if (data.value == 0) {
        if (playing) {
            // console.log("Stopping transport");
            phonestrument.pausePlaying();
            playing = false;
        }
    }

})

togglePanVol.on('*', function(data) {
    if (data.value == 1) {
        panOnDrag = true;
        volOnDrag = true;
    } else {
        panOnDrag = false;
        volOnDrag = false;
    }
});


}
